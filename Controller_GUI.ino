//Library imports
#include "RTClib.h"
#include "SPI.h"
#include "SdFat.h"
#include "Adafruit_GFX.h"
#include "Adafruit_ILI9341.h"
#include "time.h"
#include "Wire.h"
#include "avr/dtostrf.h"

//Set pins on the Arduino Due that connect to the LCD screen
#define LCD_CS 27
#define LCD_RST 25
#define LCD_DC 23
#define LCD_LIGHT 29

//Set color codes so that calls to color can use the color name instead of the hex code
#define BLACK 0x0000
#define BLUE 0x001F
#define RED 0xF800
#define GREEN 0x07E0
#define CYAN 0x07FF
#define GRAY 0x8410
#define MAGENTA 0xF81F
#define PURPLE 0x300D
#define YELLOW 0xFFE0 
#define WHITE 0xFFFF

//Set pins connected to buttons on Arduino Due
#define BUTTON_BLUE 4
#define BUTTON_GREEN 5
#define BUTTON_YELLOW 6
#define BUTTON_RED 7

boolean push_blue = 0;
boolean push_green = 0;
boolean push_yellow = 0;
boolean push_red = 0;

//Set pins connected to the SD card port
#define SD_CS 2

//Initialize global variables that control what appears on the LCD screen
int screen_select = 1;    //the variable that determines what screen and state the platform is in
boolean flicker_control = 0;    //prevents all screens from flickering and rapidly reloading during platform operation
int exit_condition = 0;   //holds the platform state until the spectroradiometer has finished sending spectrum data

//Set the format of the date and time that the real time clock returns
RTC_DS3231 rtc;
char days_of_the_week[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
char time_stamp[] = "DDD_ DD MMM YYYY hh_mm_ss";
char now_time[20];

//Initialize the object that handles the control of the items that appear on the LCD screen
Adafruit_ILI9341 myTFT = Adafruit_ILI9341(LCD_CS, LCD_DC, LCD_RST);
// TFT myTFT = TFT(LCD_CS, LCD_DC, LCD_RST);

//Initialize the object that handles the creation of files and folders on the SD card
SdFat sd;

//Initialization of a global variable that acts as a cursor for the selection of files and folders on the SD card in the arduino port
int file_selection = 0;

//Initialization of global variables that will store metadata related to files and folders stored on the SD card 
char compressor;
char measurement_name[100] = "";
char session_name[100] = "";
char background_measurement_name[100] = "    Background: ZERO";
char current_folder[100] = "";
char char_buffer[256] = "";
boolean subtract_background = 0;

//Initialization of global variables related to the processing and storage of data generated by the spectroradiometer
word integration_time = 100;
word background_integration_time = 100;
word scans_accumulated = 0;
int escape_global = 0;
int data_count;
word spectrum[2100];
word corrected_spectrum[2100];

double pixel_power[2100];
double background_pixel_power[2100];
double uv_power = 0;
double blue_power = 0;
double green_power = 0;
double red_power = 0;

double uv_average = 0;
double blue_average = 0;
double green_average = 0;
double red_average = 0;
unsigned long start_time = 0;
unsigned long stop_time = 0;
unsigned int session_measurement_count = 0;
unsigned long session_duration;
unsigned long uv_energy;
unsigned long blue_energy;
unsigned long green_energy;
unsigned long red_energy;
//_________________________________________________

void setup() {
  
  initializeSerial();   //start Serial communication between the microcontroller and the spectroradiometer
  activate3VoltPins();    //activate pins that supply power to the screen and SD card port
  buttonsStart();     //activate the buttons
  initializeScreen();   //start the LCD screen
  startSDCard();    //start the SD card
  initializeBuffers();    //set the value of the variables that will store spectrum data to zero
  beginRTC();    //begin the communication between the real time clock and the mircocontroller
}
//_________________________________________________

void loop() {
  redButtonPush();    // identify that the user has pushed the red button 
  yellowButtonPush();    // identify that the user has pushed the yellow button 
  greenButtonPush();    // identify that the user has pushed the green button 
  blueButtonPush();    // identify that the user has pushed the blue button 
  
  screenControl();    //change the display and platform state based on the button pressed
  
  if (Serial1.available()) {    //clear any lingering data in the buffer that facilitates communication between the microcontroller and the spectroradiometer
    Serial.println(Serial1.read());
  }

}
//_________________________________________________

//Basic Support Functions
void initializeSerial(){    
  Serial.begin(115200);   //start communication between the microcontroller and any diagnostic device connected to the microcontroller
  Serial1.begin(9600);    //start communication between the microncontroller and the spectroradiometer
  
  while (Serial1.available()) {   //clear any lingering data in the buffer that facilitates communication between the microcontroller and the spectroradiometer
    Serial.println("flushing the pipe");
    Serial.println(Serial1.read());
  }
  Serial.println("The Serial Port is active");
}
//_________________________________________________

// Set 50 to 53 pins to have a high voltage
void activate3VoltPins() {    //activate pins that supply power to the screen and SD card port
  pinMode(50, OUTPUT);
  pinMode(51, OUTPUT);
  pinMode(52, OUTPUT);
  pinMode(53, OUTPUT);

  digitalWrite(50, HIGH);
  digitalWrite(51, HIGH);
  digitalWrite(52, HIGH);
  digitalWrite(53, HIGH);
}
//_________________________________________________

void buttonsStart(){    //set the pins that connect to the buttons to a state that allows the sending and recieving of a signal
  pinMode(BUTTON_RED, INPUT_PULLUP);
  pinMode(BUTTON_GREEN, INPUT_PULLUP);
  pinMode(BUTTON_BLUE, INPUT_PULLUP);
  pinMode(BUTTON_YELLOW, INPUT_PULLUP);
}
//_________________________________________________

void redButtonPush(){   // identify that the user has pushed the red button 
  int button_value = digitalRead(BUTTON_RED);
  if (button_value == LOW){
    push_red = 1;
    flicker_control = 0;
    delay(500);
  }
}
//_________________________________________________

void yellowButtonPush(){   // identify that the user has pushed the yellow button 
  int button_value = digitalRead(BUTTON_YELLOW);
  if (button_value == LOW){
    push_yellow = 1;
    flicker_control = 0;
    delay(500);
  }
}
//_________________________________________________

void greenButtonPush(){   // identify that the user has pushed the green button 
  int button_value = digitalRead(BUTTON_GREEN);
  if (button_value == LOW){
    push_green = 1;
    flicker_control = 0;
    delay(500);
  }
}
//_________________________________________________

void blueButtonPush(){   // identify that the user has pushed the blue button 
  int button_value = digitalRead(BUTTON_BLUE);
  if (button_value == LOW){
    push_blue = 1;
    flicker_control = 0;
    delay(500);
  }
}

